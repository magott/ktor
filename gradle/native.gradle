//            extraOpts '--disable', 'devirtualization', '-Xuse-experimental', 'io.ktor.util.KtorExperimentalAPI,io.ktor.util.InternalAPI'

kotlin {
    targets {
        //fromPreset(presets.iosArm32, 'iosArm32') the common posix code needs to be updated for 32 bits.
        fromPreset(presets.iosArm64, 'iosArm64')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.macosX64, 'macosX64') /* {
        // If we specify libcurl here -- it is built for every subproject.
        // So we declare it in ktor-client:ktor-client-curl build gradle.
            compilations.main.cinterops {
                libcurl {
                    defFile 'ktor-client/ktor-client-curl/posix/src/io/c_interop/libcurl.def'
                    includeDirs.headerFilterOnly '/opt/local/include', '/usr/local/include'
                }
            }
        } */
    }
    sourceSets {
        nativeMain {
            kotlin.srcDir 'nativeMain'
            dependencies {
                implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
                implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-native', version: kotlinx_io_version
                implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-native', version: kotlinx_io_version

                implementation "org.jetbrains.kotlinx:atomicfu:$atomic_fu_version"
            }
        }

        darwinMain {
            kotlin.srcDir 'darwinMain'
            dependsOn nativeMain
            dependsOn commonMain
        }
        darwinTest { dependsOn darwinMain }

        posixMain {
            kotlin.srcDir 'posixMain'
            dependsOn nativeMain
            dependsOn commonMain
        }
        posixTest { dependsOn posixMain }

        configure([iosArm32Main, iosArm64Main, iosX64Main, macosX64Main]) {
            dependsOn darwinMain
        }
        configure([macosX64Main, linuxX64Main, mingwX64Main]) {
            dependsOn posixMain
        }
    }
}

// This is a workaround for https://youtrack.jetbrains.com/issue/KT-27803 .
// To be fixed in 1.3.10.
kotlin.targets.matching { it.platformType.name == 'native' }.all {
    compilations.all {
        cinterops.all {
            afterEvaluate {
                configurations[dependencyConfigurationName].attributes.attribute(
                    Usage.USAGE_ATTRIBUTE,
                    objects.named(Usage, 'kotlin-api')
                )
            }
        }
    }
}
