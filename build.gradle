buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomic_fu_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

ext.configuredVersion = project.hasProperty('releaseVersion') ? project.releaseVersion : project.version
ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty('publishLocal')

apply from: 'gradle/platform.gradle'
apply from: 'gradle/experimental.gradle'

allprojects {
    group = 'io.ktor'
    version = configuredVersion

    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlinx/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }

        jcenter()
    }

    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-atomicfu'

    apply from: rootProject.file('gradle/common.gradle')
    apply from: rootProject.file('gradle/jvm.gradle')
    apply from: rootProject.file('gradle/native.gradle')
    //apply from: rootProject.file('gradle/unix.gradle')
    apply from: rootProject.file('gradle/js.gradle')
//    apply from: rootProject.file('gradle/dokka.gradle')
    apply from: rootProject.file('gradle/publish.gradle')

    kotlin {
        targets {
            if (System.getProperty('idea.active') == 'true') {
                fromPreset(presets.linuxX64, 'native')
            }
        }

        configure(sourceSets) {
            def srcDir = name.endsWith('Main') ? 'src' : 'test'
            def resourcesPrefix = name.endsWith('Test') ? 'test-' : ''
            def platform = name[0..-5]

            kotlin.srcDirs = ["$platform/$srcDir"]
            resources.srcDirs = ["$platform/${resourcesPrefix}resources"]
        }

        configure(targets) {
            compilations.all { compilation ->
                def compileTask = tasks.getByName(compilation.compileKotlinTaskName)
                compileTask.kotlinOptions.freeCompilerArgs += [
                    "-progressive",
                    "-Xuse-experimental=" +
                        "kotlin.Experimental," +
                        "io.ktor.util.KtorExperimentalAPI," +
                        "io.ktor.util.InternalAPI"
                ]
            }

//            if (project.name != 'ktor-server-core' && project.name.contains('ktor-server') && project.name != 'ktor-server-sessions') {
            compileKotlinJvm.kotlinOptions.freeCompilerArgs += [experimentalAnnotations]
//            }

        }

    }

    configurations { testOutput }

    tasks.build.dependsOn(['sourceJar', 'emptyJar'])
}

